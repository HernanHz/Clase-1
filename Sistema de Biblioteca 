{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HernanHz/Clase-1/blob/main/Sistema%20de%20Biblioteca%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dIL1j5IATtb_"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "sWlFznkrUIK_",
        "outputId": "bb3f34ee-5643-4d68-813f-c9310e1cc744"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Menú de Biblioteca\n",
            "1. Agregar libro\n",
            "2. Registrar usuario\n",
            "3. Prestar libro\n",
            "4. Devolver libro\n",
            "5. Ver historial de préstamos\n",
            "6. Salir\n"
          ]
        }
      ],
      "source": [
        "from collections import deque\n",
        "from queue import Queue\n",
        "\n",
        "# Clase que representa un libro en la biblioteca\n",
        "class Libro:\n",
        "    def __init__(self, titulo, autor, categoria):\n",
        "        self.titulo = titulo\n",
        "        self.autor = autor\n",
        "        self.categoria = categoria\n",
        "        self.disponible = True\n",
        "        self.dias_prestamo = 0\n",
        "\n",
        "    def get_titulo(self):\n",
        "        return self.titulo\n",
        "\n",
        "    def is_disponible(self):\n",
        "        return self.disponible\n",
        "\n",
        "    def prestar(self, dias):\n",
        "        self.disponible = False\n",
        "        self.dias_prestamo = dias\n",
        "\n",
        "    def devolver(self):\n",
        "        self.disponible = True\n",
        "        self.dias_prestamo = 0\n",
        "\n",
        "    def __str__(self):\n",
        "        estado = \"Sí\" if self.disponible else \"No\"\n",
        "        return f\"Título: {self.titulo}, Autor: {self.autor}, Categoría: {self.categoria}, Disponible: {estado}\"\n",
        "\n",
        "# Clase que representa a un usuario\n",
        "class Usuario:\n",
        "    def __init__(self, nombre):\n",
        "        self.nombre = nombre\n",
        "\n",
        "    def get_nombre(self):\n",
        "        return self.nombre\n",
        "\n",
        "    def __str__(self):\n",
        "        return f\"Nombre: {self.nombre}\"\n",
        "\n",
        "# Clase que representa la biblioteca\n",
        "class Biblioteca:\n",
        "    def __init__(self):\n",
        "        self.libros = deque()  # Lista enlazada\n",
        "        self.usuarios = [None] * 100  # Arreglo fijo de usuarios\n",
        "        self.lista_espera = Queue()  # Cola\n",
        "        self.historial_prestamos = []  # Pila\n",
        "        self.total_usuarios = 0\n",
        "\n",
        "    def agregar_libro(self, titulo, autor, categoria):\n",
        "        self.libros.append(Libro(titulo, autor, categoria))\n",
        "        print(\"Libro agregado correctamente.\")\n",
        "\n",
        "    def registrar_usuario(self, nombre):\n",
        "        if self.total_usuarios < len(self.usuarios):\n",
        "            self.usuarios[self.total_usuarios] = Usuario(nombre)\n",
        "            self.total_usuarios += 1\n",
        "            print(\"Usuario registrado con éxito.\")\n",
        "        else:\n",
        "            print(\"No se pueden registrar más usuarios.\")\n",
        "\n",
        "    def prestar_libro(self, titulo, nombre_usuario, dias):\n",
        "        for libro in self.libros:\n",
        "            if libro.get_titulo().lower() == titulo.lower() and libro.is_disponible():\n",
        "                libro.prestar(dias)\n",
        "                self.historial_prestamos.append(f\"Libro '{titulo}' prestado a {nombre_usuario} por {dias} días.\")\n",
        "                print(\"Libro prestado con éxito.\")\n",
        "                return\n",
        "        print(\"Libro no disponible. Usuario agregado a la lista de espera.\")\n",
        "        self.lista_espera.put(Usuario(nombre_usuario))\n",
        "\n",
        "    def devolver_libro(self, titulo):\n",
        "        for libro in self.libros:\n",
        "            if libro.get_titulo().lower() == titulo.lower() and not libro.is_disponible():\n",
        "                libro.devolver()\n",
        "                self.historial_prestamos.append(f\"Libro '{titulo}' devuelto.\")\n",
        "                print(\"Libro devuelto con éxito.\")\n",
        "                if not self.lista_espera.empty():\n",
        "                    siguiente_usuario = self.lista_espera.get()\n",
        "                    print(f\"Libro ahora disponible para {siguiente_usuario.get_nombre()}\")\n",
        "                return\n",
        "        print(\"Libro no encontrado o ya está disponible.\")\n",
        "\n",
        "    def mostrar_historial_prestamos(self):\n",
        "        print(\"Historial de Préstamos:\")\n",
        "        while self.historial_prestamos:\n",
        "            print(self.historial_prestamos.pop())\n",
        "\n",
        "# Clase principal que gestiona el menú\n",
        "def main():\n",
        "    biblioteca = Biblioteca()\n",
        "\n",
        "    while True:\n",
        "        print(\"\\nMenú de Biblioteca\")\n",
        "        print(\"1. Agregar libro\")\n",
        "        print(\"2. Registrar usuario\")\n",
        "        print(\"3. Prestar libro\")\n",
        "        print(\"4. Devolver libro\")\n",
        "        print(\"5. Ver historial de préstamos\")\n",
        "        print(\"6. Salir\")\n",
        "        opcion = input(\"Seleccione una opción: \")\n",
        "\n",
        "        if opcion == '1':\n",
        "            titulo = input(\"Título: \")\n",
        "            autor = input(\"Autor: \")\n",
        "            categoria = input(\"Categoría: \")\n",
        "            biblioteca.agregar_libro(titulo, autor, categoria)\n",
        "\n",
        "        elif opcion == '2':\n",
        "            nombre = input(\"Nombre del usuario: \")\n",
        "            biblioteca.registrar_usuario(nombre)\n",
        "\n",
        "        elif opcion == '3':\n",
        "            titulo = input(\"Ingrese el título del libro que desea prestar: \")\n",
        "            nombre_usuario = input(\"Nombre del usuario: \")\n",
        "            dias = int(input(\"Días de préstamo: \"))\n",
        "            biblioteca.prestar_libro(titulo, nombre_usuario, dias)\n",
        "\n",
        "        elif opcion == '4':\n",
        "            titulo = input(\"Título del libro a devolver: \")\n",
        "            biblioteca.devolver_libro(titulo)\n",
        "\n",
        "        elif opcion == '5':\n",
        "            biblioteca.mostrar_historial_prestamos()\n",
        "\n",
        "        elif opcion == '6':\n",
        "            print(\"Saliendo del sistema...\")\n",
        "            break\n",
        "\n",
        "        else:\n",
        "            print(\"Opción no válida, intente de nuevo.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "te97dxI5WAoF"
      },
      "outputs": [],
      "source": [
        "from collections import deque\n",
        "from queue import Queue\n",
        "\n",
        "# Clase Libro\n",
        "class Libro:\n",
        "    def __init__(self, titulo, autor, categoria):\n",
        "        self.titulo = titulo\n",
        "        self.autor = autor\n",
        "        self.categoria = categoria\n",
        "        self.disponible = True\n",
        "        self.dias_prestamo = 0\n",
        "\n",
        "    def get_titulo(self):\n",
        "        return self.titulo\n",
        "\n",
        "    def is_disponible(self):\n",
        "        return self.disponible\n",
        "\n",
        "    def prestar(self, dias):\n",
        "        self.disponible = False\n",
        "        self.dias_prestamo = dias\n",
        "\n",
        "    def devolver(self):\n",
        "        self.disponible = True\n",
        "        self.dias_prestamo = 0\n",
        "\n",
        "    def __str__(self):\n",
        "        estado = \"Sí\" if self.disponible else \"No\"\n",
        "        return f\"Título: {self.titulo}, Autor: {self.autor}, Categoría: {self.categoria}, Disponible: {estado}\"\n",
        "\n",
        "# Nodo del árbol de libros\n",
        "class NodoLibro:\n",
        "    def __init__(self, libro):\n",
        "        self.libro = libro\n",
        "        self.izquierdo = None\n",
        "        self.derecho = None\n",
        "\n",
        "# Árbol de libros\n",
        "class ArbolLibros:\n",
        "    def __init__(self):\n",
        "        self.raiz = None\n",
        "\n",
        "    def insertar(self, libro):\n",
        "        self.raiz = self._insertar_rec(self.raiz, libro)\n",
        "\n",
        "    def _insertar_rec(self, nodo, libro):\n",
        "        if nodo is None:\n",
        "            return NodoLibro(libro)\n",
        "        if libro.titulo.lower() < nodo.libro.titulo.lower():\n",
        "            nodo.izquierdo = self._insertar_rec(nodo.izquierdo, libro)\n",
        "        elif libro.titulo.lower() > nodo.libro.titulo.lower():\n",
        "            nodo.derecho = self._insertar_rec(nodo.derecho, libro)\n",
        "        return nodo\n",
        "\n",
        "    def buscar(self, titulo):\n",
        "        return self._buscar_rec(self.raiz, titulo.lower())\n",
        "\n",
        "    def _buscar_rec(self, nodo, titulo):\n",
        "        if nodo is None:\n",
        "            return None\n",
        "        if titulo == nodo.libro.titulo.lower():\n",
        "            return nodo.libro\n",
        "        elif titulo < nodo.libro.titulo.lower():\n",
        "            return self._buscar_rec(nodo.izquierdo, titulo)\n",
        "        else:\n",
        "            return self._buscar_rec(nodo.derecho, titulo)\n",
        "\n",
        "    def inorden(self):\n",
        "        self._inorden_rec(self.raiz)\n",
        "\n",
        "    def _inorden_rec(self, nodo):\n",
        "        if nodo:\n",
        "            self._inorden_rec(nodo.izquierdo)\n",
        "            print(nodo.libro)\n",
        "            self._inorden_rec(nodo.derecho)\n",
        "\n",
        "# Usuario y árbol de usuarios\n",
        "class Usuario:\n",
        "    def __init__(self, nombre):\n",
        "        self.nombre = nombre\n",
        "\n",
        "    def get_nombre(self):\n",
        "        return self.nombre\n",
        "\n",
        "    def __str__(self):\n",
        "        return f\"Nombre: {self.nombre}\"\n",
        "\n",
        "class NodoUsuario:\n",
        "    def __init__(self, usuario):\n",
        "        self.usuario = usuario\n",
        "        self.izquierdo = None\n",
        "        self.derecho = None\n",
        "\n",
        "class ArbolUsuarios:\n",
        "    def __init__(self):\n",
        "        self.raiz = None\n",
        "\n",
        "    def insertar(self, usuario):\n",
        "        self.raiz = self._insertar_rec(self.raiz, usuario)\n",
        "\n",
        "    def _insertar_rec(self, nodo, usuario):\n",
        "        if nodo is None:\n",
        "            return NodoUsuario(usuario)\n",
        "        if usuario.nombre.lower() < nodo.usuario.nombre.lower():\n",
        "            nodo.izquierdo = self._insertar_rec(nodo.izquierdo, usuario)\n",
        "        elif usuario.nombre.lower() > nodo.usuario.nombre.lower():\n",
        "            nodo.derecho = self._insertar_rec(nodo.derecho, usuario)\n",
        "        return nodo\n",
        "\n",
        "    def buscar(self, nombre):\n",
        "        return self._buscar_rec(self.raiz, nombre.lower())\n",
        "\n",
        "    def _buscar_rec(self, nodo, nombre):\n",
        "        if nodo is None:\n",
        "            return None\n",
        "        if nombre == nodo.usuario.nombre.lower():\n",
        "            return nodo.usuario\n",
        "        elif nombre < nodo.usuario.nombre.lower():\n",
        "            return self._buscar_rec(nodo.izquierdo, nombre)\n",
        "        else:\n",
        "            return self._buscar_rec(nodo.derecho, nombre)\n",
        "\n",
        "    def inorden(self):\n",
        "        self._inorden_rec(self.raiz)\n",
        "\n",
        "    def _inorden_rec(self, nodo):\n",
        "        if nodo:\n",
        "            self._inorden_rec(nodo.izquierdo)\n",
        "            print(nodo.usuario)\n",
        "            self._inorden_rec(nodo.derecho)\n",
        "\n",
        "# Árbol de categorías\n",
        "class ArbolCategorias:\n",
        "    def __init__(self):\n",
        "        self.categorias = {}  # Diccionario: clave = categoría, valor = lista de libros\n",
        "\n",
        "    def agregar_libro(self, libro):\n",
        "        categoria = libro.categoria.lower()\n",
        "        if categoria not in self.categorias:\n",
        "            self.categorias[categoria] = []\n",
        "        self.categorias[categoria].append(libro)\n",
        "\n",
        "    def mostrar_categorias(self):\n",
        "        print(\"Categorías registradas:\")\n",
        "        for categoria in sorted(self.categorias.keys()):\n",
        "            print(f\"- {categoria.capitalize()} ({len(self.categorias[categoria])} libros)\")\n",
        "\n",
        "    def mostrar_libros_por_categoria(self, categoria):\n",
        "        categoria = categoria.lower()\n",
        "        if categoria in self.categorias:\n",
        "            print(f\"\\nLibros en la categoría '{categoria.capitalize()}':\")\n",
        "            for libro in self.categorias[categoria]:\n",
        "                print(libro)\n",
        "        else:\n",
        "            print(\"Categoría no encontrada.\")\n",
        "\n",
        "# Clase principal Biblioteca\n",
        "class Biblioteca:\n",
        "    def __init__(self):\n",
        "        self.arbol_libros = ArbolLibros()\n",
        "        self.arbol_usuarios = ArbolUsuarios()\n",
        "        self.arbol_categorias = ArbolCategorias()\n",
        "        self.lista_espera = Queue()\n",
        "        self.historial_prestamos = []\n",
        "\n",
        "    def agregar_libro(self, titulo, autor, categoria):\n",
        "        libro = Libro(titulo, autor, categoria)\n",
        "        self.arbol_libros.insertar(libro)\n",
        "        self.arbol_categorias.agregar_libro(libro)\n",
        "        print(\"Libro agregado correctamente al sistema.\")\n",
        "\n",
        "    def registrar_usuario(self, nombre):\n",
        "        if self.arbol_usuarios.buscar(nombre):\n",
        "            print(\"El usuario ya está registrado.\")\n",
        "        else:\n",
        "            self.arbol_usuarios.insertar(Usuario(nombre))\n",
        "            print(\"Usuario registrado con éxito.\")\n",
        "\n",
        "    def prestar_libro(self, titulo, nombre_usuario, dias):\n",
        "        libro = self.arbol_libros.buscar(titulo)\n",
        "        if libro and libro.is_disponible():\n",
        "            libro.prestar(dias)\n",
        "            self.historial_prestamos.append(f\"Libro '{titulo}' prestado a {nombre_usuario} por {dias} días.\")\n",
        "            print(\"Libro prestado con éxito.\")\n",
        "        else:\n",
        "            print(\"Libro no disponible. Usuario agregado a la lista de espera.\")\n",
        "            self.lista_espera.put(Usuario(nombre_usuario))\n",
        "\n",
        "    def devolver_libro(self, titulo):\n",
        "        libro = self.arbol_libros.buscar(titulo)\n",
        "        if libro and not libro.is_disponible():\n",
        "            libro.devolver()\n",
        "            self.historial_prestamos.append(f\"Libro '{titulo}' devuelto.\")\n",
        "            print(\"Libro devuelto con éxito.\")\n",
        "            if not self.lista_espera.empty():\n",
        "                siguiente_usuario = self.lista_espera.get()\n",
        "                print(f\"Libro ahora disponible para {siguiente_usuario.get_nombre()}\")\n",
        "        else:\n",
        "            print(\"Libro no encontrado o ya está disponible.\")\n",
        "\n",
        "    def mostrar_historial_prestamos(self):\n",
        "        print(\"Historial de Préstamos:\")\n",
        "        while self.historial_prestamos:\n",
        "            print(self.historial_prestamos.pop())\n",
        "\n",
        "    def mostrar_libros(self):\n",
        "        print(\"Listado de libros en orden alfabético:\")\n",
        "        self.arbol_libros.inorden()\n",
        "\n",
        "    def mostrar_usuarios(self):\n",
        "        print(\"Listado de usuarios en orden alfabético:\")\n",
        "        self.arbol_usuarios.inorden()\n",
        "\n",
        "    def mostrar_categorias(self):\n",
        "        self.arbol_categorias.mostrar_categorias()\n",
        "\n",
        "    def mostrar_libros_por_categoria(self, categoria):\n",
        "        self.arbol_categorias.mostrar_libros_por_categoria(categoria)\n",
        "\n",
        "# Menú interactivo\n",
        "def main():\n",
        "    biblioteca = Biblioteca()\n",
        "\n",
        "    while True:\n",
        "        print(\"\\n--- Menú de Biblioteca ---\")\n",
        "        print(\"1. Agregar libro\")\n",
        "        print(\"2. Registrar usuario\")\n",
        "        print(\"3. Prestar libro\")\n",
        "        print(\"4. Devolver libro\")\n",
        "        print(\"5. Ver historial de préstamos\")\n",
        "        print(\"6. Ver libros ordenados\")\n",
        "        print(\"7. Ver usuarios ordenados\")\n",
        "        print(\"8. Ver categorías registradas\")\n",
        "        print(\"9. Ver libros por categoría\")\n",
        "        print(\"10. Salir\")\n",
        "        opcion = input(\"Seleccione una opción: \")\n",
        "\n",
        "        if opcion == '1':\n",
        "            titulo = input(\"Título: \")\n",
        "            autor = input(\"Autor: \")\n",
        "            categoria = input(\"Categoría: \")\n",
        "            biblioteca.agregar_libro(titulo, autor, categoria)\n",
        "\n",
        "        elif opcion == '2':\n",
        "            nombre = input(\"Nombre del usuario: \")\n",
        "            biblioteca.registrar_usuario(nombre)\n",
        "\n",
        "        elif opcion == '3':\n",
        "            titulo = input(\"Título del libro a prestar: \")\n",
        "            nombre_usuario = input(\"Nombre del usuario: \")\n",
        "            dias = int(input(\"Días de préstamo: \"))\n",
        "            biblioteca.prestar_libro(titulo, nombre_usuario, dias)\n",
        "\n",
        "        elif opcion == '4':\n",
        "            titulo = input(\"Título del libro a devolver: \")\n",
        "            biblioteca.devolver_libro(titulo)\n",
        "\n",
        "        elif opcion == '5':\n",
        "            biblioteca.mostrar_historial_prestamos()\n",
        "\n",
        "        elif opcion == '6':\n",
        "            biblioteca.mostrar_libros()\n",
        "\n",
        "        elif opcion == '7':\n",
        "            biblioteca.mostrar_usuarios()\n",
        "\n",
        "        elif opcion == '8':\n",
        "            biblioteca.mostrar_categorias()\n",
        "\n",
        "        elif opcion == '9':\n",
        "            categoria = input(\"Nombre de la categoría: \")\n",
        "            biblioteca.mostrar_libros_por_categoria(categoria)\n",
        "\n",
        "        elif opcion == '10':\n",
        "            print(\"Saliendo del sistema. ¡Hasta pronto!\")\n",
        "            break\n",
        "\n",
        "        else:\n",
        "            print(\"Opción no válida, intente de nuevo.\")\n",
        "\n",
        "# Ejecutar el programa\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sHt6MwprWBNf"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0aTmfe6sWBzo"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}