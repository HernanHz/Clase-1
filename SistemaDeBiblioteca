{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMGc6aqv/32RVkcAdp+/VVG",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HernanHz/Clase-1/blob/main/SistemaDeBiblioteca\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dIL1j5IATtb_"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import deque\n",
        "from queue import Queue\n",
        "\n",
        "# Clase que representa un libro en la biblioteca\n",
        "class Libro:\n",
        "    def __init__(self, titulo, autor, categoria):\n",
        "        self.titulo = titulo\n",
        "        self.autor = autor\n",
        "        self.categoria = categoria\n",
        "        self.disponible = True\n",
        "        self.dias_prestamo = 0\n",
        "\n",
        "    def get_titulo(self):\n",
        "        return self.titulo\n",
        "\n",
        "    def is_disponible(self):\n",
        "        return self.disponible\n",
        "\n",
        "    def prestar(self, dias):\n",
        "        self.disponible = False\n",
        "        self.dias_prestamo = dias\n",
        "\n",
        "    def devolver(self):\n",
        "        self.disponible = True\n",
        "        self.dias_prestamo = 0\n",
        "\n",
        "    def __str__(self):\n",
        "        estado = \"Sí\" if self.disponible else \"No\"\n",
        "        return f\"Título: {self.titulo}, Autor: {self.autor}, Categoría: {self.categoria}, Disponible: {estado}\"\n",
        "\n",
        "# Clase que representa a un usuario\n",
        "class Usuario:\n",
        "    def __init__(self, nombre):\n",
        "        self.nombre = nombre\n",
        "\n",
        "    def get_nombre(self):\n",
        "        return self.nombre\n",
        "\n",
        "    def __str__(self):\n",
        "        return f\"Nombre: {self.nombre}\"\n",
        "\n",
        "# Clase que representa la biblioteca\n",
        "class Biblioteca:\n",
        "    def __init__(self):\n",
        "        self.libros = deque()  # Lista enlazada\n",
        "        self.usuarios = [None] * 100  # Arreglo fijo de usuarios\n",
        "        self.lista_espera = Queue()  # Cola\n",
        "        self.historial_prestamos = []  # Pila\n",
        "        self.total_usuarios = 0\n",
        "\n",
        "    def agregar_libro(self, titulo, autor, categoria):\n",
        "        self.libros.append(Libro(titulo, autor, categoria))\n",
        "        print(\"Libro agregado correctamente.\")\n",
        "\n",
        "    def registrar_usuario(self, nombre):\n",
        "        if self.total_usuarios < len(self.usuarios):\n",
        "            self.usuarios[self.total_usuarios] = Usuario(nombre)\n",
        "            self.total_usuarios += 1\n",
        "            print(\"Usuario registrado con éxito.\")\n",
        "        else:\n",
        "            print(\"No se pueden registrar más usuarios.\")\n",
        "\n",
        "    def prestar_libro(self, titulo, nombre_usuario, dias):\n",
        "        for libro in self.libros:\n",
        "            if libro.get_titulo().lower() == titulo.lower() and libro.is_disponible():\n",
        "                libro.prestar(dias)\n",
        "                self.historial_prestamos.append(f\"Libro '{titulo}' prestado a {nombre_usuario} por {dias} días.\")\n",
        "                print(\"Libro prestado con éxito.\")\n",
        "                return\n",
        "        print(\"Libro no disponible. Usuario agregado a la lista de espera.\")\n",
        "        self.lista_espera.put(Usuario(nombre_usuario))\n",
        "\n",
        "    def devolver_libro(self, titulo):\n",
        "        for libro in self.libros:\n",
        "            if libro.get_titulo().lower() == titulo.lower() and not libro.is_disponible():\n",
        "                libro.devolver()\n",
        "                self.historial_prestamos.append(f\"Libro '{titulo}' devuelto.\")\n",
        "                print(\"Libro devuelto con éxito.\")\n",
        "                if not self.lista_espera.empty():\n",
        "                    siguiente_usuario = self.lista_espera.get()\n",
        "                    print(f\"Libro ahora disponible para {siguiente_usuario.get_nombre()}\")\n",
        "                return\n",
        "        print(\"Libro no encontrado o ya está disponible.\")\n",
        "\n",
        "    def mostrar_historial_prestamos(self):\n",
        "        print(\"Historial de Préstamos:\")\n",
        "        while self.historial_prestamos:\n",
        "            print(self.historial_prestamos.pop())\n",
        "\n",
        "# Clase principal que gestiona el menú\n",
        "def main():\n",
        "    biblioteca = Biblioteca()\n",
        "\n",
        "    while True:\n",
        "        print(\"\\nMenú de Biblioteca\")\n",
        "        print(\"1. Agregar libro\")\n",
        "        print(\"2. Registrar usuario\")\n",
        "        print(\"3. Prestar libro\")\n",
        "        print(\"4. Devolver libro\")\n",
        "        print(\"5. Ver historial de préstamos\")\n",
        "        print(\"6. Salir\")\n",
        "        opcion = input(\"Seleccione una opción: \")\n",
        "\n",
        "        if opcion == '1':\n",
        "            titulo = input(\"Título: \")\n",
        "            autor = input(\"Autor: \")\n",
        "            categoria = input(\"Categoría: \")\n",
        "            biblioteca.agregar_libro(titulo, autor, categoria)\n",
        "\n",
        "        elif opcion == '2':\n",
        "            nombre = input(\"Nombre del usuario: \")\n",
        "            biblioteca.registrar_usuario(nombre)\n",
        "\n",
        "        elif opcion == '3':\n",
        "            titulo = input(\"Ingrese el título del libro que desea prestar: \")\n",
        "            nombre_usuario = input(\"Nombre del usuario: \")\n",
        "            dias = int(input(\"Días de préstamo: \"))\n",
        "            biblioteca.prestar_libro(titulo, nombre_usuario, dias)\n",
        "\n",
        "        elif opcion == '4':\n",
        "            titulo = input(\"Título del libro a devolver: \")\n",
        "            biblioteca.devolver_libro(titulo)\n",
        "\n",
        "        elif opcion == '5':\n",
        "            biblioteca.mostrar_historial_prestamos()\n",
        "\n",
        "        elif opcion == '6':\n",
        "            print(\"Saliendo del sistema...\")\n",
        "            break\n",
        "\n",
        "        else:\n",
        "            print(\"Opción no válida, intente de nuevo.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sWlFznkrUIK_",
        "outputId": "03c545b6-74b6-4320-9ac4-f7656ad5d0d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Menú de Biblioteca\n",
            "1. Agregar libro\n",
            "2. Registrar usuario\n",
            "3. Prestar libro\n",
            "4. Devolver libro\n",
            "5. Ver historial de préstamos\n",
            "6. Salir\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "te97dxI5WAoF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "sHt6MwprWBNf"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0aTmfe6sWBzo"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}